// Objective-C API for talking to github.com/osiloke/proxycache/proxy Go package.
//   gobind -lang=objc github.com/osiloke/proxycache/proxy
//
// File is generated by gobind. Do not edit.

#ifndef __Proxy_H__
#define __Proxy_H__

@import Foundation;
#include "Universe.objc.h"


@class ProxyCache;
@class ProxyConfig;
@class ProxyFileStore;
@class ProxyHLSProxy;
@class ProxyNoSIGPIPEDialer;
@class ProxyProxyResult;
@class ProxyServer;

@interface ProxyCache : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * CacheKey generate cache key hash
 */
- (NSString*)cacheKey:(NSString*)key;
@end

@interface ProxyConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)target;
- (void)setTarget:(NSString*)v;
- (BOOL)debug;
- (void)setDebug:(BOOL)v;
- (NSString*)cacheFolder;
- (void)setCacheFolder:(NSString*)v;
- (NSString*)port;
- (void)setPort:(NSString*)v;
@end

@interface ProxyFileStore : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
// skipped method FileStore.Get with unsupported parameter or return types

/**
 * Has from a NoopStore will always return false, nil.
 */
- (BOOL)has:(NSString*)key ret0_:(BOOL*)ret0_ error:(NSError**)error;
// skipped method FileStore.Put with unsupported parameter or return types

@end

/**
 * HLSProxy handles file cache
 */
@interface ProxyHLSProxy : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewHLSProxy creates a new server
 */
- (instancetype)init;
- (ProxyProxyResult*)clear;
/**
 * Has check if cache has item or cache item
 */
- (ProxyProxyResult*)has:(NSString*)fullURL;
- (ProxyProxyResult*)rewriteHLS:(NSString*)fullURL;
/**
 * Setup setup cache proxy
 */
- (void)setup:(NSString*)addr cachePath:(NSString*)cachePath;
@end

/**
 * NoSIGPIPEDialer returns a dialer that won't SIGPIPE should a connection
actually SIGPIPE. This prevents the debugger from intercepting the signal
even though this is normal behaviour.
 */
@interface ProxyNoSIGPIPEDialer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
// skipped field NoSIGPIPEDialer.Timeout with unsupported type: time.Duration

// skipped field NoSIGPIPEDialer.Deadline with unsupported type: time.Time

// skipped field NoSIGPIPEDialer.LocalAddr with unsupported type: net.Addr

- (BOOL)dualStack;
- (void)setDualStack:(BOOL)v;
// skipped field NoSIGPIPEDialer.FallbackDelay with unsupported type: time.Duration

// skipped field NoSIGPIPEDialer.KeepAlive with unsupported type: time.Duration

// skipped field NoSIGPIPEDialer.Resolver with unsupported type: *net.Resolver

// skipped field NoSIGPIPEDialer.Cancel with unsupported type: <-chan struct{}

// skipped method NoSIGPIPEDialer.Dial with unsupported parameter or return types

// skipped method NoSIGPIPEDialer.DialContext with unsupported parameter or return types

@end

@interface ProxyProxyResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (BOOL)ok;
- (void)setOk:(BOOL)v;
- (NSString*)key;
- (void)setKey:(NSString*)v;
- (NSError*)error;
- (void)setError:(NSError*)v;
- (NSData*)data;
- (void)setData:(NSData*)v;
@end

/**
 * Server defines a proxy cache server
 */
@interface ProxyServer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewServer creates a new server
 */
- (instancetype)init;
/**
 * Setup setup the server with addr and cache path
 */
- (void)setup:(NSString*)addr cachePath:(NSString*)cachePath;
/**
 * Shutdown the server
 */
- (void)shutdown;
/**
 * Start the server
 */
- (void)start;
@end

FOUNDATION_EXPORT const long ProxyMetadata;

@interface Proxy : NSObject
// skipped variable Debug with unsupported type: *log.Logger

// skipped variable DebugWriter with unsupported type: io.Writer

/**
 * DefaultServer is a global proxy server
 */
+ (ProxyServer*) defaultServer;
+ (void) setDefaultServer:(ProxyServer*)v;

// skipped variable Error with unsupported type: *log.Logger

// skipped variable ErrorWriter with unsupported type: io.Writer

// skipped variable Info with unsupported type: *log.Logger

// skipped variable InfoWriter with unsupported type: io.Writer

// skipped variable NoSIGPIPETransport with unsupported type: net/http.RoundTripper

@end

FOUNDATION_EXPORT ProxyCache* ProxyCreateCache(NSString* path, NSError** error);

FOUNDATION_EXPORT ProxyConfig* ProxyLoadConfig(NSString* path, NSError** error);

/**
 * NewHLSProxy creates a new server
 */
FOUNDATION_EXPORT ProxyHLSProxy* ProxyNewHLSProxy(void);

/**
 * NewServer creates a new server
 */
FOUNDATION_EXPORT ProxyServer* ProxyNewServer(void);

FOUNDATION_EXPORT ProxyServer* ProxyOnDebug(ProxyServer* s);

/**
 * ReplaceHLSUrls replace hls urls
 */
FOUNDATION_EXPORT NSData* ProxyReplaceHLSUrls(NSData* hlsRaw, NSString* proxyServerURL, NSError** error);

// skipped function SilenceSIGPIPE with unsupported parameter or return types


#endif
